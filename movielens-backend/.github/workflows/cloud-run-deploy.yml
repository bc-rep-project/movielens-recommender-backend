name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: movielens-recommender-backend
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker gcr.io

      - name: Build and push container
        run: |
          # Check if main.py exists and list contents for debugging
          ls -la
          if [ -f "main.py" ]; then
            echo "main.py exists, proceeding with build"
          else
            echo "WARNING: main.py not found in current directory!"
            find . -name "main.py" -type f
          fi

          # Use the alternative Dockerfile for more robust deployment
          echo "Using alternative Dockerfile for more robust deployment"
          docker build -f Dockerfile.alternative -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: >
            --allow-unauthenticated
            --min-instances=0
            --max-instances=1
            --memory=512Mi
            --cpu=1
            --port=8080
            --timeout=300s
            --concurrency=80
            --set-env-vars=PYTHONPATH=/app

      - name: Show Output
        run: |
          echo "Service URL: ${{ steps.deploy.outputs.url }}" 