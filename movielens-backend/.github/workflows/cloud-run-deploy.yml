name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: movielens-recommender-backend
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker gcr.io

      - name: Create simplified deployment files
        run: |
          # Verify simplified_app.py exists
          if [ -f "simplified_app.py" ]; then
            echo "simplified_app.py exists, proceeding with build"
          else
            echo "WARNING: simplified_app.py not found, copying from main_simple.py"
            cp main_simple.py simplified_app.py || echo "Failed to copy main_simple.py"
          fi
          
          # Verify Dockerfile.minimal exists
          if [ ! -f "Dockerfile.minimal" ]; then
            echo "Creating Dockerfile.minimal"
            cat > Dockerfile.minimal << 'EOL'
            FROM python:3.10-slim
            WORKDIR /app
            COPY simplified_app.py .
            RUN pip install --no-cache-dir fastapi uvicorn pydantic
            ENV PORT=8080
            EXPOSE 8080
            CMD ["python", "-m", "uvicorn", "simplified_app:app", "--host", "0.0.0.0", "--port", "8080"]
            EOL
          fi
          
          # Show files for debugging
          echo "Contents of simplified_app.py:"
          head -n 20 simplified_app.py
          
          echo "Contents of Dockerfile.minimal:"
          cat Dockerfile.minimal

      - name: Build and push container
        run: |
          # Use the minimal Dockerfile
          docker build -f Dockerfile.minimal -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: >
            --allow-unauthenticated
            --min-instances=0
            --max-instances=1
            --memory=512Mi
            --cpu=1
            --port=8080
            --timeout=300s

      - name: Test Deployment
        run: |
          SERVICE_URL="${{ steps.deploy.outputs.url }}"
          echo "Service URL: $SERVICE_URL"
          echo "Waiting for service to become available..."
          
          # Wait for up to 60 seconds for the service to become available
          for i in {1..12}; do
            echo "Attempt $i: Testing root endpoint..."
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/)
            
            if [ "$RESPONSE" == "200" ]; then
              echo "SUCCESS! Service is responding with 200 OK"
              break
            else
              echo "Service returned $RESPONSE, waiting 5 seconds..."
              sleep 5
            fi
            
            if [ $i -eq 12 ]; then
              echo "WARNING: Service is not responding after 60 seconds"
            fi
          done
          
          echo "Testing other endpoints:"
          echo "Health: $(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/health)"
          echo "API Health: $(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/api/v1/health/health)"
          echo "Debug: $(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/debug)" 