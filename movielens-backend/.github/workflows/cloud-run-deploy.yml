name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: movielens-recommender-backend
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Authorize Docker push
        run: gcloud auth configure-docker gcr.io

      - name: Verify deployment files
        run: |
          echo "Verifying main.py exists..."
          if [ -f "main.py" ]; then
            echo "✅ main.py exists"
          else
            echo "❌ main.py not found"
            exit 1
          fi
          
          echo "Verifying Dockerfile exists..."
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile exists"
          else
            echo "❌ Dockerfile not found"
            exit 1
          fi
          
          echo "Verifying requirements-minimal.txt exists..."
          if [ -f "requirements-minimal.txt" ]; then
            echo "✅ requirements-minimal.txt exists"
          else
            echo "❌ requirements-minimal.txt not found"
            exit 1
          fi
          
          echo "All required files exist. Proceeding with build..."

      - name: Build and push container
        run: |
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: >
            --allow-unauthenticated
            --min-instances=0
            --max-instances=1
            --memory=512Mi
            --cpu=1
            --port=8080
            --timeout=300s
            --update-env-vars=PYTHONUNBUFFERED=TRUE

      - name: Test Deployment
        run: |
          SERVICE_URL="${{ steps.deploy.outputs.url }}"
          echo "Service URL: $SERVICE_URL"
          echo "Waiting for service to become available..."
          
          # Wait for up to 60 seconds for the service to become available
          for i in {1..12}; do
            echo "Attempt $i: Testing root endpoint..."
            RESPONSE=$(curl -s -o response.txt -w "%{http_code}" $SERVICE_URL/)
            
            if [ "$RESPONSE" == "200" ]; then
              echo "SUCCESS! Service is responding with 200 OK"
              echo "Response:"
              cat response.txt
              break
            else
              echo "Service returned $RESPONSE, waiting 5 seconds..."
              echo "Response:"
              cat response.txt
              sleep 5
            fi
            
            if [ $i -eq 12 ]; then
              echo "WARNING: Service is not responding after 60 seconds"
            fi
          done 